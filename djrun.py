# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'djrun.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import platform
import signal
import subprocess
import webbrowser

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_djrun_window(object):
    def setupUi(self, djrun_window):
        djrun_window.setObjectName("djrun_window")
        djrun_window.setWindowModality(QtCore.Qt.NonModal)
        djrun_window.resize(607, 261)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(djrun_window.sizePolicy().hasHeightForWidth())
        djrun_window.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("OCR-A BT")
        djrun_window.setFont(font)
        djrun_window.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        djrun_window.setMouseTracking(False)
        djrun_window.setTabletTracking(False)
        djrun_window.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        djrun_window.setWindowIcon(icon)
        djrun_window.setStyleSheet("background-color: #272727;")
        djrun_window.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.djrun_widget = QtWidgets.QWidget(djrun_window)
        self.djrun_widget.setObjectName("djrun_widget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.djrun_widget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 60, 561, 101))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.runserver_btn_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.runserver_btn_layout.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint
        )
        self.runserver_btn_layout.setContentsMargins(0, 0, 0, 0)
        self.runserver_btn_layout.setSpacing(7)
        self.runserver_btn_layout.setObjectName("runserver_btn_layout")
        self.sign = QtWidgets.QLabel(self.djrun_widget)
        self.sign.setGeometry(QtCore.QRect(130, 230, 351, 20))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        self.sign.setFont(font)
        self.sign.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.sign.setStyleSheet("color: whitesmoke;")
        self.sign.setAlignment(QtCore.Qt.AlignCenter)
        self.sign.setObjectName("sign")
        self.label = QtWidgets.QLabel(self.djrun_widget)
        self.label.setGeometry(QtCore.QRect(80, 170, 441, 31))
        font = QtGui.QFont()
        font.setFamily("Swis721 LtEx BT")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.lang_btns_layout = QtWidgets.QFrame(self.djrun_widget)
        self.lang_btns_layout.setGeometry(QtCore.QRect(480, 20, 91, 21))
        self.lang_btns_layout.setStyleSheet(
            "background-color: #237895;\n" "border-radius: 7px;"
        )
        self.lang_btns_layout.setObjectName("lang_btns_layout")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.lang_btns_layout)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ru_lang_btn = QtWidgets.QPushButton(self.lang_btns_layout)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display Semib")
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.ru_lang_btn.setFont(font)
        self.ru_lang_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: #2f2f2f;\n"
            "    color: white;\n"
            "    border-radius: 5px;\n"
            "    margin-left: 2px;\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: #5f5f5f;\n"
            "}"
        )
        self.ru_lang_btn.setObjectName("ru_lang_btn")
        self.horizontalLayout.addWidget(self.ru_lang_btn)
        self.en_lang_btn = QtWidgets.QPushButton(self.lang_btns_layout)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display Semib")
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.en_lang_btn.setFont(font)
        self.en_lang_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: #2f2f2f;\n"
            "    color: white;\n"
            "    border-radius: 5px;\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: #5f5f5f;\n"
            "}"
        )
        self.en_lang_btn.setObjectName("en_lang_btn")
        self.horizontalLayout.addWidget(self.en_lang_btn)
        self.tk_lang_btn = QtWidgets.QPushButton(self.lang_btns_layout)
        font = QtGui.QFont()
        font.setFamily("Segoe UI Variable Display Semib")
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.tk_lang_btn.setFont(font)
        self.tk_lang_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: #2f2f2f;\n"
            "    color: white;\n"
            "    border-radius: 5px;\n"
            "    margin-right: 2px;\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: #5f5f5f;\n"
            "}"
        )
        self.tk_lang_btn.setObjectName("tk_lang_btn")
        self.horizontalLayout.addWidget(self.tk_lang_btn)
        self.runserver_btn = QtWidgets.QPushButton(self.djrun_widget)
        self.runserver_btn.setGeometry(QtCore.QRect(28, 60, 541, 99))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.runserver_btn.sizePolicy().hasHeightForWidth()
        )
        self.runserver_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Swis721 LtEx BT")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.runserver_btn.setFont(font)
        self.runserver_btn.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.runserver_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: #2f2f2f;\n"
            "    color: white;\n"
            "    border: 2px solid #237895;\n"
            "    border-radius: 15px;\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: #5f5f5f;\n"
            "}"
        )
        self.runserver_btn.setObjectName("runserver_btn")
        djrun_window.setCentralWidget(self.djrun_widget)

        self.retranslateUi(djrun_window)
        QtCore.QMetaObject.connectSlotsByName(djrun_window)

        self.runserver_btn.clicked.connect(self.toggle_server)
        self.tk_lang_btn.clicked.connect(lambda: self.change_lang("tk"))
        self.ru_lang_btn.clicked.connect(lambda: self.change_lang("ru"))
        self.en_lang_btn.clicked.connect(lambda: self.change_lang("en"))

    server_status = "off"
    lang = "tk"
    dictionary = {
        "tk": {
            "status-label-on": "Serwerin ýagdaýy: Işledilen",
            "status-label-off": "Serwerin ýagdaýy: Öçürilen",
            "btn-label-on": "Serweri öçür",
            "btn-label-off": "Serweri işlet",
        },
        "ru": {
            "status-label-on": "Статус сервера: Включён",
            "status-label-off": "Статус сервера: Выключен",
            "btn-label-on": "Выключить сервер",
            "btn-label-off": "Включить сервер",
        },
        "en": {
            "status-label-on": "Server status: Running",
            "status-label-off": "Server status: Stopped",
            "btn-label-on": "Stop server",
            "btn-label-off": "Start server",
        },
    }

    def change_lang(self, lang):
        self.lang = lang
        self.label.setText(self.dictionary[lang][f"status-label-{self.server_status}"])
        self.runserver_btn.setText(
            self.dictionary[lang][f"btn-label-{self.server_status}"]
        )

    url = "http://localhost:8000"

    def toggle_server(self):
        if self.server_status == "on":
            stop_django_server(self.process)
            print("Server stopped")
            self.server_status = "off"
            self.label.setText(
                self.dictionary[self.lang][f"status-label-{self.server_status}"]
            )
            self.runserver_btn.setText(
                self.dictionary[self.lang][f"btn-label-{self.server_status}"]
            )
        elif self.server_status == "off":
            self.process = run_django_server()
            open_chrome(self.url)
            self.server_status = "on"
            self.label.setText(
                self.dictionary[self.lang][f"status-label-{self.server_status}"]
            )
            self.runserver_btn.setText(
                self.dictionary[self.lang][f"btn-label-{self.server_status}"]
            )

    def retranslateUi(self, djrun_window):
        _translate = QtCore.QCoreApplication.translate
        djrun_window.setWindowTitle(_translate("djrun_window", "djrun"))
        self.sign.setText(_translate("djrun_window", "Developed by rampoe & neharix"))
        self.label.setText(_translate("djrun_window", "Serwerin ýagdaýy: Öçürilen"))
        self.ru_lang_btn.setText(_translate("djrun_window", "RU"))
        self.en_lang_btn.setText(_translate("djrun_window", "EN"))
        self.tk_lang_btn.setText(_translate("djrun_window", "TK"))
        self.runserver_btn.setText(_translate("djrun_window", "Serweri işlet"))


def run_django_server():
    # Use subprocess to run the Django development server
    command = "python manage.py runserver 0.0.0.0:8000"
    process = subprocess.Popen(command, shell=False)
    return process


def stop_django_server(process):
    # Send a keyboard interrupt to stop the Django server process
    try:
        process.send_signal(signal.CTRL_C_EVENT if os.name == "nt" else signal.SIGINT)
        process.wait()  # Wait for the process to finish
    except KeyboardInterrupt:
        pass


def open_chrome(url):
    # Open Google Chrome
    try:
        # Attempt to use the default browser
        webbrowser.open(url)
    except webbrowser.Error:
        # Specify Chrome directly (adjust the path if needed)
        chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"  # Example path for Windows
        if platform.system() == "Darwin":
            chrome_path = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"  # Example path for macOS
        elif platform.system() == "Linux":
            chrome_path = "/usr/bin/google-chrome"  # Example path for Linux
        subprocess.Popen([chrome_path, url])


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    djrun_window = QtWidgets.QMainWindow()
    ui = Ui_djrun_window()
    ui.setupUi(djrun_window)
    djrun_window.show()
    sys.exit(app.exec_())
